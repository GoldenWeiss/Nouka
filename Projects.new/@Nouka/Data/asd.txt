#==============================================================================
# ** PriorityQueue
#------------------------------------------------------------------------------
#  	Classes an Array's elements in order.
#------------------------------------------------------------------------------
# q.pop => retrieve and delete biggest element
# q.get => retrieve and delete smallest element
#==============================================================================

class PriorityQueue # Max-heap property Queue
	attr_reader :data
	def initialize
		@data = [nil]
	end
	def heapify_up(index)
		unless index <= 1	
			_parent = index/2
			if @data[_parent][0] < @data[index][0]
				@data.swap(_parent, index)
				heapify_up(_parent)
			end
		end
	end
	def heapify_down(index)
		_child = index * 2
		return if _child > @data.size-1
		_child += 1 if _child < @data.size-1 && @data[_child+1][0] > @data[_child][0]
		if @data[_child][0] > @data[index][0]
			@data.swap(index, _child)
			heapify_down(_child)
		end
	end
	def <<(obj,priority)
		@data<<[priority,obj]
		heapify_up(@data.size-1)
		return @data.to_s
	end
	alias :push :<<
	def pop 
		@data.swap(1, @data.size-1)
		_obj = @data.pop
		heapify_down(1)
		return _obj[1]
	end
	def get
		return @data.pop[1]
	end
	def clear
		@data.clear
	end
	def empty?
		return @data.size < 2
	end
	def each(&block)
		@data.reverse_each(&block)
	end
end